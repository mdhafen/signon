<?php
include_once( 'config.phpm' );
//require PDO;

$dbh = '';
$ldap = '';

function db_connect( $num=0 ) {
	global $dbh, $config;

	if ( empty($dbh[$num]) ) {
		$settings = $config['database'][$num];
		if ( empty($settings) ) {
			print "No database connection configured";
			die();
		}
		$engine = $settings['engine'];
		$host = $settings['host'];
		$schema = $settings['schema'];
		$port = ( ! empty($settings['port']) ) ? ";port=$settings[port]" : "";
		$dsn = "$engine:host=$host$port;dbname=$schema";
		try {
			$dbh[$num] = new PDO( $dsn, $settings['user'], $settings['passwd'] );
		} catch ( PDOException $e ) {
			print "Couldn't connect to database: ". $e->getMessage();
			die();
		}
		$dbh[$num]->setAttribute( PDO::ATTR_CASE, PDO::CASE_NATURAL );
	}
	return $dbh[$num];
}

function do_ldap_connect( $userdn = '', $passwd = '' ) {
	global $ldap, $config;

	if ( empty($config['ldap']['server']) ) {
		print "No ldap connection configured";
		die();
	}

	if ( empty( $userdn ) ) {
		if ( ! empty($_SESSION['loggedin_user']) ) {
			$userdn = $_SESSION['loggedin_user']['userid'];
			$passwd = $_SESSION['loggedin_user']['password'];
		}
		else {
			$userdn = $config['ldap']['userdn'];
			$passwd = $config['ldap']['passwd'];
		}

	}
	if ( ! empty( $ldap ) ) {
		$search = @ldap_read( $ldap, $config['ldap']['userdn'], '(objectClass=*)' );
		if ( $search ) {
			return $ldap;
		}
	}

	$ldap = ldap_connect( $config['ldap']['server'] );
	ldap_set_option( $ldap, LDAP_OPT_PROTOCOL_VERSION, 3 );
	ldap_set_option( $ldap, LDAP_OPT_REFERRALS, false );
	ldap_set_option( $ldap, LDAP_OPT_RESTART, true );
	ldap_set_option( $ldap, LDAP_OPT_NETWORK_TIMEOUT, 30 );

	ldap_bind( $ldap, $userdn, $passwd );

	return $ldap;
}

function ldap_quick_search( $filter = array('objectclass' => '*'), $attrs = array('cn'), $scope = 2, $base = '' ) {
	global $config, $ldap;
	$results = array();

	$filter_str = "";
	if ( empty($filter) ) {
		$filter_str = "";
	}
	else if ( is_array($filter) ) {
		foreach ( $filter as $attr => $value ) {
			$filter_str .= "($attr=$value)";
		}
		if ( count($filter) > 1 ) {
			$filter_str = "(&$filter_str)";
		}
	}
	else {
		$filter_str = $filter;
	}

	if ( empty($base) ) {
		$base = $config['ldap']['base'];
	}

	$paged_cookie = '';
	do {
		ldap_control_paged_result( $ldap, 100, false, $paged_cookie );
		if ( $scope == 0 ) {
			$search = @ldap_read( $ldap, $base, $filter_str, $attrs );
		}
		else if ( $scope == 1 ) {
			$search = @ldap_list( $ldap, $base, $filter_str, $attrs );
		}
		else {
			$search = @ldap_search( $ldap, $base, $filter_str, $attrs );
		}
		if ( empty($search) ) {
			return $results;
		}

		$entry = ldap_first_entry( $ldap, $search );
		if ( $entry ) {
			do {
				$result = array( 'dn' => ldap_get_dn( $ldap, $entry ) );
				$attribs = ldap_get_attributes( $ldap, $entry );
				for ( $i = 0; $i < $attribs['count']; $i++) {
					$attr_name = $attribs[$i];
					$values = array();
					for( $j = 0; $j < $attribs[$attr_name]['count']; $j++ ) {
						$values[] = $attribs[$attr_name][$j];
					}
					$result[ $attr_name ] = $values;
				}
				$results[] = $result;
			} while ( $entry = ldap_next_entry( $ldap, $entry ) );
		}
		ldap_control_paged_result_response( $ldap, $search, $paged_cookie );
	} while ( $paged_cookie !== null && $paged_cookie != '' );

	return $results;
}

function do_ldap_modify( $userdn, $attrs ) {
	global $ldap;

	$attrs = array_filter( $attrs );
	if ( empty( $userdn ) || ! is_array( $attrs ) || empty( $attrs ) ) {
		return 0;
	}

	$result = @ldap_modify( $ldap, $userdn, $attrs );

	return $result;
}

function do_ldap_add( $userdn, $attrs ) {
	global $ldap;
	$result = 0;

	$attrs = array_filter( $attrs );
	if ( empty( $userdn ) || ! is_array( $attrs ) || empty( $attrs ) ) {
		return $result;
	}

	if ( ldap_ensure_ous( ldap_dn_get_parent( $userdn ) ) ) {
		$result = ldap_add( $ldap, $userdn, $attrs );
	}

	return $result;
}

function do_ldap_delete( $userdn ) {
	global $ldap;
	$result = 0;

	if ( empty( $userdn ) ) {
		return $result;
	}

	$result = ldap_delete( $ldap, $userdn );

	return $result;
}

function do_ldap_attr_add( $dn, $attrs ) {
	global $ldap;
	$result = 0;
	if ( empty($dn) || empty($attrs) || !is_array($attrs) ) {
		return 0;
	}
	$result = @ldap_mod_add( $ldap, $dn, $attrs );
	return $result;
}

function do_ldap_attr_del( $dn, $attrs ) {
	global $ldap;
	$result = 0;
	if ( empty($dn) || empty($attrs) || !is_array($attrs) ) {
		return 0;
	}
	$result = @ldap_mod_del( $ldap, $dn, $attrs );
	return $result;
}

function do_ldap_rename( $dn, $attr, $new_parent ) {
	global $ldap;
        $result = 0;
	if ( empty($dn) || empty($attr) || empty($new_parent) ) {
		return 0;
	}
	if ( ldap_ensure_ous($new_parent) ) {
		$result = @ldap_rename( $ldap, $dn, $attr, $new_parent, true );
	}
	ldap_fix_group_memberships( $dn, $attr .','. $new_parent );
        return $result;
}

function ldap_ensure_ous( $dn ) {
	$work = preg_split( '/(?<!\\\\),/', $dn );
	$result = 1;
	$base = '';
	$dn = '';

	$work = array_reverse($work);
	foreach ( $work as $ou ) {
		if ( empty($ou) ) { continue; }
		if ( stripos($ou,'dc=') !== FALSE ) {
			if ( empty($base) ) {
				$base = $ou;
			}
			else {
				$base = $ou .','. $base;
			}
		}
		else {
			$dn = $ou .','. $dn;
			$set = ldap_quick_search( array('objectClass'=>'*'), array(), 0, $dn.$base );
			if ( empty($set) ) {
				$result = ldap_create_ou( $dn.$base );
			}
		}
	}
	return $result;
}

function ldap_create_ou( $dn ) {
	global $ldap;
	$result = 0;

	$work = preg_split( '/(?<!\\\\),/', $dn );
	$work = explode( '=', $work[0] );
	$ou = $work[1];
	if ( !empty($ou) ) {
		$work = array(
			'objectClass' => 'organizationalUnit',
			'ou' => $ou,
		);

		$result = ldap_add( $ldap, $dn, $work );
	}

	return $result;
}

function ldap_dn_get_parent( $dn ) {
	$new_parent = preg_split('/(?<!\\\\),/',$dn);
	array_shift($new_parent);
	$new_parent = implode(',',$new_parent);
	return $new_parent;
}

function ldap_fix_group_memberships( $old_dn, $new_dn ) {
	$set = ldap_quick_search( array('member'=>$old_dn), array() );
	foreach ( $set as $group ) {
		$group_dn = $group['dn'];
		do_ldap_attr_del( $group_dn, array('member' => $old_dn) );
		do_ldap_attr_add( $group_dn, array('member' => $new_dn) );
	}
}

function ldap_get_next_num( $attrib='sambaSID' ) {
	$sid = 0;
	$prefix = '';
	switch ( $attrib ) {
	case 'sambaSID':
		$set = ldap_quick_search( array('objectClass'=>'sambaSamAccount'), array('sambaSID') );
		break;
	case 'uidNumber':
		$set = ldap_quick_search( array('objectClass'=>'posixAccount'), array('uidNumber') );
		break;
	default:
		$set = array();
		break;
	}
	if ( empty($set) ) {
		return 0;
	}
	foreach ( $set as $user ) {
		$attr = $user[$attrib][0];
		preg_match('/(.*\D)?(\d+)/', $attr, $matches);
		list( $str, $prefix, $this_sid ) = $matches;
		if ( $this_sid > $sid ) {
			$sid = $this_sid;
		}
	}

	if ( $sid > 0 ) {
		$sid++;
		return $prefix . $sid;
	}
}

function stripslashes_array( $array ) {
  if ( ! is_array( $array ) ) { return $array; }

  foreach ( $array as &$value ) {
    $value = stripslashes( $value );
  }
  return $array;
}

//  copied from http://stackoverflow.com/questions/8560874/
if (!function_exists('ldap_escape')) {
    define('LDAP_ESCAPE_FILTER', 0x01);
    define('LDAP_ESCAPE_DN',     0x02);

    /**
     * @param string $subject The subject string
     * @param string $ignore Set of characters to leave untouched
     * @param int $flags Any combination of LDAP_ESCAPE_* flags to indicate the
     *                   set(s) of characters to escape.
     * @return string
     */
    function ldap_escape($subject, $ignore = '', $flags = 0)
    {
        static $charMaps = array(
            LDAP_ESCAPE_FILTER => array('\\', '*', '(', ')', "\x00"),
            LDAP_ESCAPE_DN     => array('\\', ',', '=', '+', '<', '>', ';', '"', '#'),
        );

        // Pre-process the char maps on first call
        if (!isset($charMaps[0])) {
            $charMaps[0] = array();
            for ($i = 0; $i < 256; $i++) {
                $charMaps[0][chr($i)] = sprintf('\\%02x', $i);;
            }

            for ($i = 0, $l = count($charMaps[LDAP_ESCAPE_FILTER]); $i < $l; $i++) {
                $chr = $charMaps[LDAP_ESCAPE_FILTER][$i];
                unset($charMaps[LDAP_ESCAPE_FILTER][$i]);
                $charMaps[LDAP_ESCAPE_FILTER][$chr] = $charMaps[0][$chr];
            }

            for ($i = 0, $l = count($charMaps[LDAP_ESCAPE_DN]); $i < $l; $i++) {
                $chr = $charMaps[LDAP_ESCAPE_DN][$i];
                unset($charMaps[LDAP_ESCAPE_DN][$i]);
                $charMaps[LDAP_ESCAPE_DN][$chr] = $charMaps[0][$chr];
            }
        }

        // Create the base char map to escape
        $flags = (int)$flags;
        $charMap = array();
        if ($flags & LDAP_ESCAPE_FILTER) {
            $charMap += $charMaps[LDAP_ESCAPE_FILTER];
        }
        if ($flags & LDAP_ESCAPE_DN) {
            $charMap += $charMaps[LDAP_ESCAPE_DN];
        }
        if (!$charMap) {
            $charMap = $charMaps[0];
        }

        // Remove any chars to ignore from the list
        $ignore = (string)$ignore;
        for ($i = 0, $l = strlen($ignore); $i < $l; $i++) {
            unset($charMap[$ignore[$i]]);
        }

        // Do the main replacement
        $result = strtr($subject, $charMap);

        // Encode leading/trailing spaces if LDAP_ESCAPE_DN is passed
        if ($flags & LDAP_ESCAPE_DN) {
            if ($result[0] === ' ') {
                $result = '\\20' . substr($result, 1);
            }
            if ($result[strlen($result) - 1] === ' ') {
                $result = substr($result, 0, -1) . '\\20';
            }
        }

        return $result;
    }
}

?>
