<?php
$config = array(
	'site_title'        => 'WCSDsignon System',
	'postmaster'        => 'sysadmin@washk12.org',
	'base_dir'          => '/var/www/',  // sane defaults
	'base_url'          => '/', // these are set below
	'secure_phrase'     => 'Pick Your Own Salt',
	'secure_only'       => false,
	'authen_modules'    => array(
		'db'       => 0,
		'external' => 0,
		'ldap'     => 'core',
	),
	'password_modes'   => array(
		'openssl_camellia_256_cbc_sha512' => array( 'active' => 1, 'cipher' => 'camellia-256-cbc', 'hash' => 'ssha512' ),
		'openssl_bf_cbc_sha512' => array( 'active' => 1, 'cipher' => 'bf-cbc', 'hash' => 'ssha512', 'old' => 1 ),
		'openssl_bf_cbc_noiv_sha512' => array( 'active' => 0, 'cipher' => 'bf-cbc', 'noiv' => 1, 'hash' => 'ssha512', 'old' => 1 ),
		'mcrypt_bf_ecb_sha512' => array( 'active' => 0, 'cipher' => 'bf-ecb', 'mcrypt' => 1, 'hash' => 'ssha512', 'old' => 1 ),
		'openssl_bf_cbc' => array( 'active' => 0, 'cipher' => 'bf-cbc', 'old' => 1 ),
		'openssl_bf_cbc_noiv' => array( 'active' => 0, 'cipher' => 'bf-cbc', 'noiv' => 1, 'old' => 1 ),
		'mcrypt_bf_ecb' => array( 'active' => 0, 'cipher' => 'bf-ecb', 'mcrypt' => 1, 'old' => 1 ),
		'salted_sha512' => array( 'active' => 0, 'hash' => 'ssha512', 'old' => 1 ),
		'md5' => array( 'active' => 0, 'hash' => 'md5', 'old' => 1 ),
		'upgrade_from_old' => 1,
		'prefered' => 'openssl_camellia_256_cbc_sha512',
	),
	'authen_external_login_html' => '', //'<a class="external_auth_button" href="https://openid.localdomain/oidredirection?pluginName=FIXME">External Login</a>',
	'user_external_module' => '',
	'PS_API' => array(
		'url' => '',
		'id' => '',
		'secret' => '',
		'StaffStatus_to_role_map' => array(
			1 => 2, // Teacher is PLC Member
			4 => 3, // School Admin is Principal
			6 => 4, // DO Staff is District Personel
			7 => 6, // DO Admin is Site Supervisor
			8 => 6, // Tech Office is Site Supervisor
		),
	),
	'trusted_proxies'   => array(),
	'database'          => array(
		'core' => array(
			'write' => array(
				'engine' => 'mysql',
				'host'   => 'localhost',
				'schema' => 'SignOn',
				'user'   => 'localsignon',
				'passwd' => 'localpassword',
			),
		),
		'Labs' => array(
			'write' => array(
				'engine' => 'mysql',
				'host'   => 'localhost',
				'schema' => 'Labs_Auth_mac',
				'user'   => 'labs_mac_access',
				'passwd' => 'localpassword',
			),
		),
		'TMS' => array(
			'write' => array(
				'engine' => 'mysql',
				'host'   => 'localhost',
				'schema' => 'locations',
				'user'   => 'locations',
				'passwd' => 'localpassword',
			),
		),
	),
	'ldap' => array(
		'core' => array(
			'server' => 'ldaps://ldap1.example/ ldaps://ldap2.example/',
			'base' => 'dc=example',
			'userdn' => 'cn=admin,dc=example',
			'passwd' => 'localpassword',
			'roles' => array(
				'cn=SchoolTechnologyStaff,ou=Groups,dc=example' => 2,
				'cn=TechnologyStaff,ou=Groups,dc=example' => 3,
				'cn=DistrictManagers,ou=Groups,dc=example' => 4,
				'cn=LDAPManagers,ou=Groups,dc=example' => 5,
			),
			// role with most permissions
			'sysadmin_role' => 5,
		),
	),
	'auth' => array(
		1   => "login",
		2   => "set_password",
		4   => "add_user",
		8   => "reset_password",
		16  => "add_to_group",
		32  => "manage_objects",
		64  => "lock_student",
		128 => "lock_staff",
	),
	'role' => array(
		1 => array(
			'name' => 'guest',
			'auth' => 1,
		),
		2 => array(
			'name' => 'user',
			'auth' => 3,
		),
		3 => array(
			'name' => 'staff',
			'auth' => 15,
		),
		4 => array(
			'name' => 'manager',
			'auth' => 127,
		),
		5 => array(
			'name' => 'admin',
			'auth' => 255,
		),
	),
	'api_clients' => array(
		// client_id => array( 'name' => 'client alias', 'secret' => 'psk', 'no_session' => 1 )
	),
);

$config['base_dir'] = realpath( dirname( __FILE__ ) . '/..' );
if ( empty($_SERVER['REQUEST_URI']) ) {
	if ( !empty($_SERVER['SCRIPT_NAME']) && isset($_SERVER['PATH_INFO']) ) {
		$config['this_url'] = $_SERVER['SCRIPT_NAME'] . $_SERVER['PATH_INFO'];
	}
	else {
		$config['this_url'] = '/';
	}
}
elseif ( strpos($_SERVER['REQUEST_URI'],'?') !== false ) {
	$config['this_url'] = substr( $_SERVER['REQUEST_URI'], 0, strpos($_SERVER['REQUEST_URI'],'?') );
}
else {
	$config['this_url'] = $_SERVER['REQUEST_URI'];
}

$dir = $config['base_dir'] . '/webroot/';
$count = 1;
$host = '';
$lcs = '/';
while ( strripos( $dir, substr( $config['this_url'], 0, $count ) ) > 0 ) {
	$lcs = substr( $config['this_url'], 0, $count );
	if ( $count+1 > mb_strlen( $config['this_url'] ) ) { break; }
	$count = strpos( $config['this_url'], '/', $count + 1 );
	if ( $count < 0 || $count === false ) { break; }
}

/*
 These next two are to catch load balancers (reverse proxies).
 You may have to set X-Forwarded-Port and X-Forwarded-Proto
 in the load balancer config
  apache2: RequestHeader set X-Forwarded-Proto https

 Also, these should be secured in the server config to be rejected in headers
 except from certain trusted clients (the load balancers)
  (anything from the client, like these, can be easily spoofed
 */
$host = '';
if ( !empty($_SERVER['REMOTE_ADDR']) && ( !empty($_SERVER['SERVER_NAME']) || ( !empty($config['trusted_proxies']) && !empty($_SERVER['HTTP_X_FORWARDED_SERVER'])) ) ) {
	if ( ! empty($config['trusted_proxies']) && array_search($_SERVER['REMOTE_ADDR'],$config['trusted_proxies']) !== false ) {
		if ( isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https' || isset($_SERVER['HTTP_X_FORWARDED_SSL']) && $_SERVER['HTTP_X_FORWARDED_SSL'] == 'on' ) {
			$host = "https://". $_SERVER['HTTP_X_FORWARDED_SERVER'];
			if ( isset($_SERVER['HTTP_X_FORWARDED_PORT']) && $_SERVER['HTTP_X_FORWARDED_PORT'] != '443' ) {
				$host .= ':'. $_SERVER['HTTP_X_FORWARDED_PORT'];
			}
		}
		else if ( isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'http' ) {
			$host = "http://". $_SERVER['HTTP_X_FORWARDED_SERVER'];
			if ( isset($_SERVER['HTTP_X_FORWARDED_PORT']) && $_SERVER['HTTP_X_FORWARDED_PORT'] != '80' ) {
				$host .= ':'. $_SERVER['HTTP_X_FORWARDED_PORT'];
			}
		}
	}
	else if ( isset( $_SERVER['HTTPS'] ) && $_SERVER['HTTPS'] != 'off' ) {
		$host = "https://". $_SERVER['SERVER_NAME'];
		if ( isset($_SERVER['SERVER_PORT']) && $_SERVER['SERVER_PORT'] != '443' ) {
			$host .= ':'. $_SERVER['SERVER_PORT'];
		}
	}
	else {
		$host = "http://". $_SERVER['SERVER_NAME'];
		if ( isset($_SERVER['SERVER_PORT']) && $_SERVER['SERVER_PORT'] != '80' ) {
			$host .= ':'. $_SERVER['SERVER_PORT'];
		}
	}
}
$config['base_url'] = $host . $lcs;
if ( substr( $config['base_url'], -1, 1 ) != '/' ) {
	$config['base_url'] .= '/';
}

// Make sure all class definitions are loaded before this!
session_name( 'SAMSESS' );
if ( !empty($config['secure_only']) ) {
  $timeout = empty($config['session_expiration']) ? 0 : $config['session_expiration'];
  $start = strpos( $config['base_url'], '/' ) + 2;
  $host = substr( $config['base_url'], $start, strpos($config['base_url'],'/',$start+1)-$start );
  if ( !isset( $_SERVER['HTTPS'] ) || $_SERVER['HTTPS'] == 'off' ) {
    include_once( $config['base_dir'] .'/lib/output.phpm' );
    redirect( 'https://'. $host .'/'. $lcs );
    exit;
  }
  session_set_cookie_params( $timeout, '/', $host, true, true );
}
session_start();
?>
