<?php
// external libraries

//internal libraries
require_once( 'config.phpm' );
require_once( 'input.phpm' );
require_once( 'user.phpm' );

$logout = input( '_logout', INPUT_STR );
if ( $logout ) {
	destroy_session();
	$_SERVER['REQUEST_URI'] = substr( $_SERVER['REQUEST_URI'], 0, strrpos( $_SERVER['REQUEST_URI'], '/' ) + 1 );
	// login.tmpl.php uses $_SERVER[REQUEST_URI] as the form action
}

function authorize() {
	global $config;
	$perms = func_get_args();
	$auth = $config['auth'];
	$role = $config['role'];

	if ( ! authenticate() ) {
		include( $config['base_dir'] .'/htdocs/login.php' );
		exit;
	}

	$user = $_SESSION[ 'loggedin_user' ];
	$authen = $role[ $user['role'] ]['auth'];
	$authorized = 0;
	foreach ( $perms as $perm ) {
		if ( in_array( $perm, $auth ) ) {
			$bit = array_search( $perm, $auth );
			if ( $authen & $bit ) {
				$authorized++;
			}
		}
	}

	if ( $authorized != count( $perms ) ) {
		$_SESSION[ 'NOTPERMITTED' ] = 1;
		include( $config['base_dir'] .'/htdocs/login.php' );
		exit;
	}
}

function authorized() {
	global $config;
	$perms = func_get_args();
	$auth = $config['auth'];
	$role = $config['role'];

	if ( ! authenticate() ) {
		return;
	}

	$user = $_SESSION[ 'loggedin_user' ];
	$authen = $role[ $user['role'] ]['auth'];
	$authorized = 0;
	foreach ( $perms as $perm ) {
		if ( in_array( $perm, $auth ) ) {
			$bit = array_search( $perm, $auth );
			if ( $authen & $bit ) {
				$authorized++;
			}
		}
	}

	return ( $authorized == count( $perms ) );
}

function get_authorizations() {
	global $config;
	$auths = array();
	$auth = $config['auth'];
	$role = $config['role'];

	if ( ! authenticate() ) {
		return;
	}

	$user = $_SESSION[ 'loggedin_user' ];
	$authen = $role[ $user['role'] ]['auth'];
	foreach ( $auth as $bit => $perm ) {
		if ( $authen & $bit ) {
			array_push( $auths, $perm );
		}
	}
	return $auths;
}

function authenticate() {
	global $config;
	load_session();

	if ( ! isset( $_SESSION[ 'loggedin_user' ] ) ) {
		$username = input( '_username', INPUT_HTML_NONE );
		$password = input( '_password', INPUT_STR );
		if ( ! $username || ! $password ) {
			$_SESSION[ 'NOSESSION' ] = 1;
			$_SESSION[ 'username' ] = $username;
			$_SESSION[ 'token' ] = '';
		} else {
			$user = 0;
			if ( !empty( $config['authen_modules'] ) ) {
				if ( $config['authen_modules']['ldap'] ) {
					$user = authen_ldap( $username, $password );
				}
				if ( ! $user && $config['authen_modules']['external'] ) {
				}
				if ( ! $user && $config['authen_modules']['db'] ) {
					$user = authen_db( $username, $password );
				}
			}
			if ( $user && $user['username'] ) {
				unset( $_SESSION[ 'BADLOGIN' ] );
				unset( $_SESSION[ 'NOSESSION' ] );
				$token = hash(
					'sha512',
					session_id() .','.
					$_SERVER[ 'REMOTE_ADDR' ] .','.
					$config[ 'secure_phrase' ]
					);
				$_SESSION[ 'token' ] = $token;
				$_SESSION[ 'userid' ] = $user[ 'userid' ];
				$_SESSION[ 'username' ] = $user[ 'username' ];
				$_SESSION[ 'loggedin_user' ] = $user;
				$_SESSION[ 'new_session' ] = 1;
			} else {
				$_SESSION[ 'BADLOGIN' ] = 1;
				$_SESSION[ 'token' ] = '';
				$_SESSION[ 'username' ] = $username;
			}
		}
	}

	$my_token = hash(
		'sha512',
		session_id() .','.
		$_SERVER[ 'REMOTE_ADDR' ] .','.
		$config[ 'secure_phrase' ]
	);

	if ( $my_token == $_SESSION[ 'token' ] ) {
		return 1;
	} else {
		destroy_session();
		$_SERVER['REQUEST_URI'] = substr( $_SERVER['REQUEST_URI'], 0, strrpos( $_SERVER['REQUEST_URI'], '/' ) + 1 );
		return 0;
	}
}

function authen_db( $username, $password ) {
	global $config;
	$user = user_by_username( $username );
	if ( $user && $user['username'] && $user['password'] ) {
		$cipher = mcrypt_module_open( 'blowfish', '', 'ecb', '' );
		$iv = mcrypt_create_iv( mcrypt_enc_get_iv_size( $cipher ), MCRYPT_RAND );
		$key = substr( base64_decode( $user[ 'salt' ] ) . $config[ 'secure_phrase' ], 0, mcrypt_enc_get_key_size( $cipher ) );
		mcrypt_generic_init( $cipher, $key, $iv );

		$user_password = mdecrypt_generic( $cipher, base64_decode( $user[ 'password' ] ) );
		mcrypt_generic_deinit( $cipher );
		mcrypt_module_close( $cipher );

		$user_password = rtrim($user_password, "\0" );
		if ( strcmp( $user_password, $password ) == 0 ) {
			// dont need these anymore
			unset( $user['salt'], $user['password'] );
			return $user;
		}
	}
	return 0;
}

function authen_ldap( $username, $password ) {
	global $ldap,$config;
	$user = 0;
	$userdn = 0;
	$name = '';
	$email = '';

	if ( strripos( $username, $config['ldap']['base'] ) > 0 ) {
		$set = ldap_quick_search( array('objectClass'=>'*'), array(), 0, $username );
	}
	else {
		$set = ldap_quick_search( array( 'uid' => $username ), array() );
	}

	if ( count($set) == 1 ) {
		$userdn = $set[0]['dn'];
		$username = empty( $set[0]['uid'] ) ? $set[0]['dn'] : $set[0]['uid'][0];
		$name = $set[0]['cn'][0];
		$email = empty( $set[0]['mail'] ) ? "" : $set[0]['mail'][0];
	}

	if ( $userdn ) {
		if ( ldap_bind( $ldap, $userdn, $password ) ) {
			$role = 1;
			if ( ! empty($config['ldap']['roles']) ) {
				foreach ( $config['ldap']['roles'] as $role_id => $group_dn ) {
					$group = ldap_quick_search( array('objectClass'=>'groupOfNames'), array(), 0, $group_dn );
					if ( ! empty($group[0]) && ! empty($group[0]['member']) ) {
						foreach ( $group[0]['member'] as $member_dn ) {
							if ( strcasecmp($member_dn,$userdn) == 0 ) {
								$role = $role_id;
								break 2;
							}
						}
					}
				}
			}

			$user = array(
				'userid' => $userdn,
				'username' => $username,
				'fullname' => $name,
				'email' => $email,
				'role' => $role,
				'password' => $password,
			);
		}
		else {
			// re-bind as root
			$userdn = $config['ldap']['userdn'];
			$password = $config['ldap']['passwd'];
			do_ldap_connect( $userdn, $password );
		}
	}

	return $user;
}

function roles() {
	global $config;
	$role = $config['role'];
	return $role;
}

function new_password( $new_password ) {
	global $config;
	$cipher = mcrypt_module_open( 'blowfish', '', 'ecb', '' );
	$iv = mcrypt_create_iv( mcrypt_enc_get_iv_size( $cipher ), MCRYPT_RAND );
	$key_size = mcrypt_enc_get_key_size( $cipher );

	$rand_length = rand( $key_size - strlen( $config[ 'secure_phrase' ] ), $key_size );
	$salt = '';
	for ( $i = 0; $i < $rand_length; $i++ ) {
		$salt .= chr( rand( 32, 255 ) );
	}  // utilize as much of each byte as possible by using extended ASCII

	$key = substr( $salt . $config[ 'secure_phrase' ], 0, $key_size );
	mcrypt_generic_init( $cipher, $key, $iv );

	$user_password = mcrypt_generic( $cipher, $new_password );

	mcrypt_generic_deinit( $cipher );
	mcrypt_module_close( $cipher );

	return array( base64_encode( $user_password ), base64_encode( $salt ) );
}

?>
