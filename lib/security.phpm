<?php
// external libraries

//internal libraries
require_once( 'config.phpm' );
require_once( 'input.phpm' );
require_once( 'user.phpm' );
require_once( 'output.phpm' );
require_once( 'data.phpm' );

$logout = input( '_logout', INPUT_STR );
if ( $logout ) {
	destroy_session();
}

function authorize() {
	global $config;
	$perms = func_get_args();
	$auth = $config['auth'];
	$role = $config['role'];

	if ( ! authenticate() ) {
		output( array(), 'login' );
		exit;
	}

	$user = $_SESSION[ 'loggedin_user' ];
	$authen = $role[ $user['role'] ]['auth'];
	$authorized = 0;
	foreach ( $perms as $perm ) {
		if ( in_array( $perm, $auth ) ) {
			$bit = array_search( $perm, $auth );
			if ( $authen & $bit ) {
				$authorized++;
			}
		}
	}

	if ( $authorized != count( $perms ) ) {
		output( array( 'NOTPERMITTED' => 1 ), 'login' );
		exit;
	}
}

function authorized() {
	global $config;
	$perms = func_get_args();
	$auth = $config['auth'];
	$role = $config['role'];

	if ( ! authenticate() ) {
		return;
	}

	$user = $_SESSION[ 'loggedin_user' ];
	$authen = $role[ $user['role'] ]['auth'];
	$authorized = 0;
	foreach ( $perms as $perm ) {
		if ( in_array( $perm, $auth ) ) {
			$bit = array_search( $perm, $auth );
			if ( $authen & $bit ) {
				$authorized++;
			}
		}
	}

	return ( $authorized == count( $perms ) );
}

function get_authorizations() {
	global $config;
	$auths = array();
	$auth = $config['auth'];
	$role = $config['role'];

	if ( empty($_SESSION['loggedin_user']) ) {
		return;
	}

	$user = $_SESSION[ 'loggedin_user' ];
	$authen = $role[ $user['role'] ]['auth'];
	foreach ( $auth as $bit => $perm ) {
		if ( $authen & $bit ) {
			array_push( $auths, $perm );
		}
	}
	return $auths;
}

function authenticate() {
	global $config;
	$op = input( '_op', INPUT_HTML_NONE );

	if ( $op == 'do_login' || ! isset( $_SESSION[ 'loggedin_user' ] ) ) {
		$user = 0;
		$username = input( '_username', INPUT_HTML_NONE );
		$password = input( '_password', INPUT_STR );
		if ( ! $username || ! $password ) {
			if ( !empty($config['authen_modules']['basic']) ) {
				$username = $_SERVER['REMOTE_USER'];
				$module = $config['authen_modules']['db'];
				$user = user_by_username( $username, $module );
			}
			if ( !$user && !empty($config['authen_modules']['external']) ) {
				$module = $config['authen_modules']['external'];
				if ( is_readable( $config['base_dir'] ."/lib/". $module .".phpm" ) ) {
					include_once( $module .".phpm" );
					$ex = new Authen_External();
					$user = $ex->authen_external( $module );
				}
			}
		} else {
			if ( !empty( $config['authen_modules'] ) ) {
				if ( !empty($config['authen_modules']['ldap']) ) {
					$module = $config['authen_modules']['ldap'];
					$user = authen_ldap( $module, $username, $password );
				}
				if ( ! $user && !empty($config['authen_modules']['external']) ) {
					$module = $config['authen_modules']['external'];
					if ( is_readable( $config['base_dir'] ."/lib/". $module .".phpm" ) ) {
						include_once( $module .".phpm" );
						$ex = new Authen_External();
						$user = $ex->authen_external( $module, $username, $password );
					}
				}
				if ( ! $user && !empty($config['authen_modules']['db']) ) {
					$module = $config['authen_modules']['db'];
					$user = authen_db( $module, $username, $password );
				}
			}
		}
		if ( $user && $user['username'] ) {
			unset( $_SESSION[ 'BADLOGIN' ] );
			unset( $_SESSION[ 'NOSESSION' ] );
			$token = hash(
				'sha512',
				session_id() .','.
				$_SERVER[ 'REMOTE_ADDR' ] .','.
				$config[ 'secure_phrase' ]
				);
			$_SESSION[ 'token' ] = $token;
			$_SESSION[ 'userid' ] = $user[ 'userid' ];
			$_SESSION[ 'username' ] = $user[ 'username' ];
			$_SESSION[ 'loggedin_user' ] = $user;
			$_SESSION[ 'new_session' ] = 1;
		} else {
			$_SESSION[ 'BADLOGIN' ] = 1;
			$_SESSION[ 'token' ] = '';
			$_SESSION[ 'username' ] = $username;
		}
	}

	$my_token = hash(
		'sha512',
		session_id() .','.
		$_SERVER[ 'REMOTE_ADDR' ] .','.
		$config[ 'secure_phrase' ]
	);

	if ( $my_token == $_SESSION[ 'token' ] ) {
		return 1;
	} else {
		if ( !empty( $_SESSION['token'] ) ) {
			destroy_session();
		}
		return 0;
	}
}

function authen_against_db() {
	global $config;
	$op = input( '_op', INPUT_HTML_NONE );
	$output[ 'DBLOGIN' ] = 1;
	// Make sure the user is the DB user
	if ( isset($_SESSION['loggedin_user']) && $_SESSION['loggedin_user']['userid'] != -1 ) {
		unset( $_SESSION['loggein_user'] );
	}

	if ( $op == 'do_login' || ! isset( $_SESSION[ 'loggedin_user' ] ) ) {
		$user = 0;
		$username = input( '_username', INPUT_HTML_NONE );
		$password = input( '_password', INPUT_STR );

		if ( empty($username) || empty($password) ) {
			$output[ 'BADLOGIN' ] = 1;
		}
		else {
			$db_user = $config['database']['core']['write']['user'];
			$db_pass = $config['database']['core']['write']['passwd'];
			if ( $username === $db_user && $password === $db_pass ) {
				$user = array();
				$user[ 'userid' ] = -1;
				$user[ 'username' ] = $config['this_url'];
			}
		}

		if ( $user && $user['username'] ) {
			unset( $_SESSION[ 'NOSESSION' ] );
			$token = hash(
				'sha512',
				session_id() .','.
				$_SERVER[ 'REMOTE_ADDR' ] .','.
				$config[ 'secure_phrase' ]
				);
			$_SESSION[ 'token' ] = $token;
			$_SESSION[ 'userid' ] = $user[ 'userid' ];
			$_SESSION[ 'username' ] = $user[ 'username' ];
			$_SESSION[ 'loggedin_user' ] = $user;
			$_SESSION[ 'new_session' ] = 1;
		} else {
			$output[ 'BADLOGIN' ] = 1;
			$_SESSION[ 'token' ] = '';
			$_SESSION[ 'username' ] = $username;
		}
	}

	$my_token = hash(
		'sha512',
		session_id() .','.
		$_SERVER[ 'REMOTE_ADDR' ] .','.
		$config[ 'secure_phrase' ]
	);

	if ( $my_token == $_SESSION[ 'token' ] ) {
		return 1;
	} else {
		if ( !empty( $_SESSION['token'] ) ) {
			destroy_session();
		}
		output( $output, 'login' );
		exit;
	}
}

function authen_db( $module, $username, $password ) {
	global $config;
	$user = user_by_username( $username, $module );
	if ( $user && $user['username'] && $user['password'] ) {
		$success = 0;
		$old = 1;
		if ( $user['password_mode'] ) {
			if ( empty($config['password_modes'][ $user['password_mode'] ]) ) {
				output( array( 'PASSWORD_EXPIRED' => 1 ), 'login' );
				exit;
			}

			switch ($user['password_mode']) {
				case 'openssl_bf_cbc_sha512' :
					$success = check_password( $password, 'openssl_bf_cbc', 'ssha512', $user );
					$old = 0;
					break;
				case 'openssl_bf_cbc_noiv_sha512' :
					$success = check_password( $password, 'openssl_bf_cbc_noiv', 'ssha512', $user );
					break;
				case 'mcrypt_bf_ecb_sha512' :
					$success = check_password( $password, 'mcrypt_bf_ecb', 'ssha512', $user );
					break;
				case 'openssl_bf_cbc' :
					$success = check_password( $password, 'openssl_bf_cbc', '', $user );
					break;
				case 'openssl_bf_cbc_noiv' :
					$success = check_password( $password, 'openssl_bf_cbc_noiv', '', $user );
					break;
				case 'mcrypt_bf_ecb' :
					$success = check_password( $password, 'mcrypt_bf_ecb', '', $user );
					break;
				case 'salted_sha512' :
					$success = check_password( $password, '', 'ssha512', $user );
					break;
				case 'md5' :
					$success = check_password( $password, '', 'md5', $user );
					break;
			}
		}
		else {
			if ( !$success && !empty($config['password_modes']['openssl_bf_cbc_sha512']) ) {
				$success = check_password( $password, 'openssl_bf_cbc', 'ssha512', $user );
			}

			if ( !$success && !empty($config['password_modes']['openssl_bf_cbc']) ) {
				$success = check_password( $password, 'openssl_bf_cbc', '', $user );
				$old = $success && !empty($config['password_modes']['openssl_bf_cbc_sha512']);
			}

			if ( !$success && !empty($config['password_modes']['openssl_bf_cbc_noiv_sha512']) ) {
				$success = check_password( $password, 'openssl_bf_cbc_noiv', 'ssha512', $user );
				$old = $success;
			}

			if ( !$success && !empty($config['password_modes']['openssl_bf_cbc_noiv']) ) {
				$success = check_password( $password, 'openssl_bf_cbc_noiv', '', $user );
				$old = $success;
			}

			if ( !$success && !empty($config['password_modes']['mcrypt_bf_ecb_sha512']) ) {
				$success = check_password( $password, 'mcrypt_bf_ecb', 'ssha512', $user );
				$old = $success;
			}

			if ( !$success && !empty($config['password_modes']['mcrypt_bf_ecb']) ) {
				$success = check_password( $password, 'mcrypt_bf_ecb', '', $user );
				$old = $success;
			}

			if ( !$success && !empty($config['password_modes']['salted_sha512']) ) {
				$success = check_password( $password, '', 'ssha512', $user );
				$old = $success;
			}

			if ( !$success && !empty($config['password_modes']['md5']) ) {
				$success = check_password( $password, '', 'md5', $user );
				$old = $success;
			}
		}

		if ( $success ) {
			// dont need these anymore
			unset( $user['salt'], $user['password'] );
			if ( $old && !empty($config['password_modes']['upgrade_from_old']) ) {
				list($new_pass,$new_salt,$new_mode) = new_password($password);
				$updated['salt'] = $new_salt;
				$updated['password'] = $new_pass;
				$updated['password_mode'] = $new_mode;
				update_user( $user['userid'], $updated );
			}
			return $user;
		}
	}
	return 0;
}

function check_password( $password, $cipher, $hash, $user ) {
	global $config;
	$user_password = $user['password'];
	$key = base64_decode( $user['salt'] ) . $config['secure_phrase'];
	$iv = '';
	$options = 0;

	switch ( $cipher ) {
		case 'openssl_bf_cbc': $cipher = 'BF-CBC'; $iv = substr( $key, 0, openssl_cipher_iv_length($cipher) ); break;
		case 'openssl_bf_cbc_noiv': $cipher = 'BF-CBC'; $iv = ''; break;
		case 'mcrypt_bf_ecb':
			$cipher = 'BF-ECB';
			$user_password = base64_decode($user_password);
			$key = substr($key,0,56); // mcrypt_enc_get_key_size('bf-ecb') = 56
			$iv = '';
			$options = OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING;
			break;
		default: $cipher = ''; $iv = '';
	}
	switch ( $hash ) {
		case 'ssha512': $password = hash( 'sha512', $password . $key ); break;
		case 'md5': $password = md5( $password );
	}

	if ( $cipher ) {
		$user_password = openssl_decrypt( $user_password, $cipher, $key, $options, $iv );
		$user_password = rtrim($user_password, "\0" );
	}

	if ( strcmp( $user_password, $password ) === 0 ) {
		return 1;
	}
	else {
		return 0;
	}
}

function authen_ldap( $module, $username, $password ) {
	global $config;
	$user = 0;
	$userdn = 0;
	$name = '';
	$email = '';
	$role = 1;

	$ldap = new LDAP_Wrapper( $module );
	if ( strcasecmp( $username, $ldap->config['userdn'] ) == 0 ) {
		$set = array();
		$set[] = array( 'dn' => $username, 'cn' => array($username) );
		$role = $ldap->config['sysadmin_role'];
	}
	else if ( strripos( $username, $ldap->config['base'] ) > 0 ) {
		$set = $ldap->quick_search( array('objectClass'=>'*'), array(), 0, $username );
	}
	else {
		$set = $ldap->quick_search( array( 'uid' => $username ), array() );
	}

	if ( count($set) == 1 ) {
		$userdn = $set[0]['dn'];
		$username = empty( $set[0]['uid'] ) ? $set[0]['dn'] : $set[0]['uid'][0];
		$name = $set[0]['cn'][0];
		$email = empty( $set[0]['mail'] ) ? "" : $set[0]['mail'][0];
	}

	if ( $userdn ) {
		if ( $ldap->do_connect( $module, $userdn, $password ) ) {
			if ( ! empty($ldap->config['roles']) ) {
				foreach ( $ldap->config['roles'] as $role_id => $group_dn ) {
					$group = $ldap->quick_search( array('objectClass'=>'groupOfNames'), array(), 0, $group_dn );
					if ( ! empty($group[0]) && ! empty($group[0]['member']) ) {
						foreach ( $group[0]['member'] as $member_dn ) {
							if ( strcasecmp($member_dn,$userdn) == 0 ) {
								if ( $role_id > $role ) {
									$role = $role_id;
								}
							}
						}
					}
				}
			}

			$user = array(
				'userid' => $userdn,
				'username' => $username,
				'fullname' => $name,
				'email' => $email,
				'role' => $role,
				'password' => $password,
			);
		}
		else {
			// re-bind as root
			$userdn = $ldap->config['userdn'];
			$password = $ldap->config['passwd'];
			$ldap->do_connect( $module, $userdn, $password );
		}
	}

	return $user;
}

function roles() {
	global $config;
	$role = $config['role'];
	return $role;
}

function new_password( $new_password ) {
	global $config;

	$mode = 'openssl_bf_cbc';
	$cipher = 'BF-CBC';
	$key_size = 72;
	$phrase_size = min( strlen($config['secure_phrase']), 8 );

	$rand_length = rand( $key_size - $phrase_size, $key_size );
	$salt = openssl_random_pseudo_bytes($rand_length);

	$key = $salt . $config['secure_phrase'];
	$iv = substr( $key, 0, openssl_cipher_iv_length($cipher) );

	if ( !empty($config['password_modes']['openssl_bf_cbc_sha512']) ) {
		$new_password = hash( 'sha512', $new_password . $key );
		$mode .= '_sha512';
	}
	$user_password = openssl_encrypt( $new_password, $cipher, $key, $options=0, $iv );

	return array( $user_password, base64_encode( $salt ), $mode );
}

/*
  creates a variant of the XKCD style password if a dictionary is available
   as in 'correct horse battery staple'
  if no dictionary is available then is a random 16 character password
 */
function create_password() {
	global $config;
	$symbol_set = '!@#$%&*()-_+\'";:/?.,'; // reduced for mobile keyboards
	$numeric_set = '0123456789';
	$alpha_set = 'abcdefghijklmnopqrstuvwxyz';
	$ualpha_set = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	#$dict_str = $symbol_set . $numeric_set . $alpha_set . $ualpha_set;
	$dict_str = $alpha_set;
	$dict_file = $config['base_dir'] .'/lib/word_dictionary'; # /usr/share/dict/words
	$dictionary = array();
	$iterations = 0;
	$password = '';

	if ( is_readable( $dict_file ) ) {
		$dictionary = file( $dict_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES );
		if ( !empty($dictionary) ) {
			$dict_str = "-";
		}
	}

	$dict_size = count($dictionary) - 1;
	$dict_str_size = strlen($dict_str) - 1;
	#while ( $iterations < 4 || strlen($password) < 16 ) {
	while ( $iterations < 3 || strlen($password) < 15 ) {
		$iterations++;
		if ( !empty($dictionary) ) {
			$password .= $dictionary[ rand(0,$dict_size) ];
		}
		if ( !empty($dict_str) ) {
			$password .= $dict_str[ rand(0,$dict_str_size) ];
		}
	}
	$password = substr($password,0,-1);  // chop last '-' off

	return $password;
}

// Just in case I care that php random number generator isn't random enough
function _rand( $min = 0, $max = 255 ) {
	$range = $max - $min;

	$num = $range;
	$bytes = 0;
	do {
		$bytes++;
		$num = $num >> 8;
	} while ( $num > 0 );

	$num = 0;
	$iterations = 255;
	do {
		$iterations--;
		$raw = mcrypt_create_iv( $bytes, MCRYPT_RAND );
		for ( $s = 0; $s < $bytes; $s++ ) {
			$num = ( $num << 8 ) | ( ord( $raw[$s] ) );
		}
		$num = $num & PHP_INT_MAX; // make sure there's no overflow
	} while ( $num > $range && $interations );
	if ( $num > $range ) { $num = $num % $range; } // less safe fallback
	return $num + $min;
}

?>
