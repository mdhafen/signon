<?php
// external libraries

//internal libraries
require_once( 'config.phpm' );
require_once( 'input.phpm' );
require_once( 'user.phpm' );
require_once( 'output.phpm' );
require_once( 'data.phpm' );

$logout = input( '_logout', INPUT_STR );
if ( $logout ) {
	destroy_session();
}

function authorize() {
	global $config;
	$perms = func_get_args();
	$auth = $config['auth'];
	$role = $config['role'];

	if ( ! authenticate() ) {
		output( array(), 'login' );
		exit;
	}

	$user = $_SESSION[ 'loggedin_user' ];
	$authen = $role[ $user['role'] ]['auth'];
	$authorized = 0;
	foreach ( $perms as $perm ) {
		if ( in_array( $perm, $auth ) ) {
			$bit = array_search( $perm, $auth );
			if ( $authen & $bit ) {
				$authorized++;
			}
		}
	}

	if ( $authorized != count( $perms ) ) {
		output( array( 'NOTPERMITTED' => 1 ), 'login' );
		exit;
	}
}

function authorized() {
	global $config;
	$perms = func_get_args();
	$auth = $config['auth'];
	$role = $config['role'];

	if ( ! authenticate() ) {
		return;
	}

	$user = $_SESSION[ 'loggedin_user' ];
	$authen = $role[ $user['role'] ]['auth'];
	$authorized = 0;
	foreach ( $perms as $perm ) {
		if ( in_array( $perm, $auth ) ) {
			$bit = array_search( $perm, $auth );
			if ( $authen & $bit ) {
				$authorized++;
			}
		}
	}

	return ( $authorized == count( $perms ) );
}

function get_authorizations() {
	global $config;
	$auths = array();
	$auth = $config['auth'];
	$role = $config['role'];

	if ( empty($_SESSION['loggedin_user']) ) {
		return;
	}

	$user = $_SESSION[ 'loggedin_user' ];
	$authen = $role[ $user['role'] ]['auth'];
	foreach ( $auth as $bit => $perm ) {
		if ( $authen & $bit ) {
			array_push( $auths, $perm );
		}
	}
	return $auths;
}

function authenticate() {
	global $config;
	$op = input( '_op', INPUT_HTML_NONE );

	if ( $op == 'do_login' || ! isset( $_SESSION[ 'loggedin_user' ] ) ) {
		$user = 0;
		$username = input( '_username', INPUT_HTML_NONE );
		$password = input( '_password', INPUT_STR );
		if ( ! $username || ! $password ) {
			if ( !empty($config['authen_modules']['basic']) ) {
				$username = $_SERVER['REMOTE_USER'];
				$module = $config['authen_modules']['db'];
				$user = user_by_username( $username, $module );
			}
			if ( !$user && !empty($config['authen_modules']['external']) ) {
				$module = $config['authen_modules']['external'];
				if ( is_readable( $config['base_dir'] ."/lib/". $module .".phpm" ) ) {
					include_once( $module .".phpm" );
					$ex = new Authen_External();
					$user = $ex->authen_external( $module );
				}
			}
		} else {
			if ( !empty( $config['authen_modules'] ) ) {
				if ( !empty($config['authen_modules']['ldap']) ) {
					$module = $config['authen_modules']['ldap'];
					$user = authen_ldap( $module, $username, $password );
				}
				if ( ! $user && !empty($config['authen_modules']['external']) ) {
					$module = $config['authen_modules']['external'];
					if ( is_readable( $config['base_dir'] ."/lib/". $module .".phpm" ) ) {
						include_once( $module .".phpm" );
						$ex = new Authen_External();
						$user = $ex->authen_external( $module, $username, $password );
					}
				}
				if ( ! $user && !empty($config['authen_modules']['db']) ) {
					$module = $config['authen_modules']['db'];
					$user = authen_db( $module, $username, $password );
				}
			}
		}
		if ( $user && $user['username'] ) {
			unset( $_SESSION[ 'BADLOGIN' ] );
			unset( $_SESSION[ 'NOSESSION' ] );
			$token = hash(
				'sha512',
				session_id() .','.
				$_SERVER[ 'REMOTE_ADDR' ] .','.
				$config[ 'secure_phrase' ]
				);
			$_SESSION[ 'token' ] = $token;
			$_SESSION[ 'userid' ] = $user[ 'userid' ];
			$_SESSION[ 'username' ] = $user[ 'username' ];
			$_SESSION[ 'loggedin_user' ] = $user;
			$_SESSION[ 'new_session' ] = 1;
		} else {
			$_SESSION[ 'BADLOGIN' ] = 1;
			$_SESSION[ 'token' ] = '';
			$_SESSION[ 'username' ] = $username;
		}
	}

	$my_token = hash(
		'sha512',
		session_id() .','.
		$_SERVER[ 'REMOTE_ADDR' ] .','.
		$config[ 'secure_phrase' ]
	);

	if ( $my_token == $_SESSION[ 'token' ] ) {
		return 1;
	} else {
		if ( !empty( $_SESSION['token'] ) ) {
			destroy_session();
		}
		return 0;
	}
}

function authen_against_db() {
	global $config;
	$op = input( '_op', INPUT_HTML_NONE );
	$output[ 'DBLOGIN' ] = 1;
	// Make sure the user is the DB user
	if ( isset($_SESSION['loggedin_user']) && $_SESSION['loggedin_user']['userid'] != -1 ) {
		unset( $_SESSION['loggedin_user'] );
	}

	if ( $op == 'do_login' || ! isset( $_SESSION[ 'loggedin_user' ] ) ) {
		$user = 0;
		$username = input( '_username', INPUT_HTML_NONE );
		$password = input( '_password', INPUT_STR );

		if ( empty($username) || empty($password) ) {
			$output[ 'BADLOGIN' ] = 1;
		}
		else {
			$db_user = $config['database']['core']['write']['user'];
			$db_pass = $config['database']['core']['write']['passwd'];
			if ( $username === $db_user && $password === $db_pass ) {
				$user = array();
				$user[ 'userid' ] = -1;
				$user[ 'username' ] = $config['this_url'];
			}
		}

		if ( $user && $user['username'] ) {
			unset( $_SESSION[ 'NOSESSION' ] );
			$token = hash(
				'sha512',
				session_id() .','.
				$_SERVER[ 'REMOTE_ADDR' ] .','.
				$config[ 'secure_phrase' ]
				);
			$_SESSION[ 'token' ] = $token;
			$_SESSION[ 'userid' ] = $user[ 'userid' ];
			$_SESSION[ 'username' ] = $user[ 'username' ];
			$_SESSION[ 'loggedin_user' ] = $user;
			$_SESSION[ 'new_session' ] = 1;
		} else {
			$output[ 'BADLOGIN' ] = 1;
			$_SESSION[ 'token' ] = '';
			$_SESSION[ 'username' ] = $username;
		}
	}

	$my_token = hash(
		'sha512',
		session_id() .','.
		$_SERVER[ 'REMOTE_ADDR' ] .','.
		$config[ 'secure_phrase' ]
	);

	if ( $my_token == $_SESSION[ 'token' ] ) {
		return 1;
	} else {
		if ( !empty( $_SESSION['token'] ) ) {
			destroy_session();
		}
		output( $output, 'login' );
		exit;
	}
}

function authen_db( $module, $username, $password ) {
	global $config;
	$user = user_by_username( $username, $module );
	if ( $user && $user['username'] && $user['password'] ) {
		$success = 0;
		$mode = array();
		if ( !empty($user['password_mode']) ) {
			if ( empty($config['password_modes'][ $user['password_mode'] ]) || empty($config['password_modes'][ $user['password_mode'] ]['active']) ) {
				output( array( 'PASSWORD_EXPIRED' => 1 ), 'login' );
				exit;
			}

			$mode = $config['password_modes'][ $user['password_mode'] ];
			$success = check_password( $password, $mode, $user );
		}
		else {
			foreach ( $config['password_modes'] as $try_mode ) {
				if ( empty($try_mode['active']) ) {
					continue;
				}
				$success = check_password( $password, $try_mode, $user );
				if ( $success ) {
					$mode = $try_mode;
					break;
				}
			}
		}

		if ( $success ) {
			// dont need these anymore
			unset( $user['salt'], $user['password'] );
			if ( !empty($mode['old']) && !empty($config['password_modes']['upgrade_from_old']) ) {
				list($new_pass,$new_salt,$new_mode) = encode_password($password);
				$updated['salt'] = $new_salt;
				$updated['password'] = $new_pass;
				$updated['password_mode'] = $new_mode;
				update_user( $user['userid'], $updated );
			}
			return $user;
		}
	}
	return 0;
}

function check_password( $password, $mode, $user ) {
	global $config;

	$key = base64_decode($user['salt']) . $config['secure_phrase'];
	$user_password = decode_password( $user['password'], $key, $mode );

	if ( !empty($mode['hash']) ) {
		switch ( $mode['hash'] ) {
			case 'ssha512': $password = hash( 'sha512', $password . $key ); break;
			case 'md5': $password = md5( $password );
		}
	}

	if ( strcmp( $user_password, $password ) === 0 ) {
		return 1;
	}
	else {
		return 0;
	}
}

function decode_password( $password, $key, $mode ) {
	global $config;
	$iv = '';
	$options = 0;

	if ( !empty($mode['cipher']) ) {
		if ( empty($mode['noiv']) ) {
			$iv = substr( $key, 0, openssl_cipher_iv_length($mode['cipher']) );
		}
		if ( !empty($mode['mcrypt']) ) {
			$password = base64_decode($password);
			$key = substr($key,0,56); // mcrypt_enc_get_key_size('bf-ecb') = 56
			$iv = '';
			$options = OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING;
		}

		$password = openssl_decrypt( $password, $mode['cipher'], $key, $options, $iv );
		$password = rtrim($password, "\0" );
	}
	return $password;
}

function authen_ldap( $module, $username, $password ) {
	$user = 0;
	$userdn = 0;
	$name = '';
	$email = '';
	$role = 1;

	$ldap = new LDAP_Wrapper( $module );
	if ( strcasecmp( $username, $ldap->config['userdn'] ) == 0 ) {
		$set = array();
		$set[] = array( 'dn' => $username, 'cn' => array($username) );
		$role = $ldap->config['sysadmin_role'];
	}
	else if ( strripos( $username, $ldap->config['base'] ) > 0 ) {
		$set = $ldap->quick_search( '(objectClass=*)', array(), 0, $username );
	}
	else {
		$set = $ldap->quick_search( array( 'uid' => $username ), array() );
	}

	if ( count($set) == 1 ) {
		$userdn = $set[0]['dn'];
		$username = empty( $set[0]['uid'] ) ? $set[0]['dn'] : $set[0]['uid'][0];
		$name = $set[0]['cn'][0];
		$email = empty( $set[0]['mail'] ) ? "" : $set[0]['mail'][0];
	}

	if ( $userdn ) {
		if ( $ldap->do_connect( $module, $userdn, $password ) ) {
			if ( ! empty($ldap->config['roles']) ) {
				foreach ( $ldap->config['roles'] as $group_dn => $role_id ) {
					$group = $ldap->quick_search( '(objectClass=groupOfNames)', array(), 0, $group_dn );
					if ( ! empty($group[0]) && ! empty($group[0]['member']) ) {
						foreach ( $group[0]['member'] as $member_dn ) {
							if ( strcasecmp($member_dn,$userdn) == 0 ) {
								if ( $role_id > $role ) {
									$role = $role_id;
								}
							}
						}
					}
				}
			}

			$user = array(
				'userid' => $userdn,
				'username' => $username,
				'fullname' => $name,
				'email' => $email,
				'role' => $role,
				'password' => $password,
			);
		}
		else {
			// re-bind as root
			$userdn = $ldap->config['userdn'];
			$password = $ldap->config['passwd'];
			$ldap->do_connect( $module, $userdn, $password );
		}
	}

	return $user;
}

function authenticate_api_client() {
	global $config;

	$check_token = '';
	$username = '';
	$password = '';

	if ( !empty($_SERVER['REMOTE_USER']) ) {
		list($scheme,$basic) = explode( ' ', $_SERVER['REMOTE_USER'], 2 );
		$basic = base64_decode($basic);
		if ( !emtpy($basic) && str_contains($basic,':') ) {
			list($username,$password) = explode(':',$basic);
		}
	}
	if ( empty($username) && !empty($_SERVER['PHP_AUTH_USER']) ) {
		$username = $_SERVER['PHP_AUTH_USER'];
		$password = $_SERVER['PHP_AUTH_PW'];
	}
	if ( empty($username) ) {
		$username = input( '_client_id', INPUT_STR );
		$password = input( '_client_secret', INPUT_STR );
	}

	if ( isset($_SESSION['loggedin_user']) && $_SESSION['loggedin_user']['userid'] != -1 ) {
		// client api call on top of user session - return false.
		return 0;
	}

	if ( ! isset( $_SESSION[ 'loggedin_user' ] ) ) {
		if ( empty($username) || empty($password) ) {
			// $output[ 'BADLOGIN' ] = 1;
		}
		else {
			$client_name = $config['api_clients'][$username]['name'];
			$client_pass = $config['api_clients'][$username]['secret'];
			$no_session	 = $config['api_clients'][$username]['no_session'];
			if ( !empty($client_pass) && $password === $client_pass ) {
				$user = array();
				$user[ 'userid' ] = -1;
				$user[ 'username' ] = $client_name;

				unset( $_SESSION[ 'NOSESSION' ] );
				$token = hash(
					'sha512',
					session_id() .','.
					$_SERVER[ 'REMOTE_ADDR' ] .','.
					$config[ 'secure_phrase' ]
				);
				$check_token = $token;
				if ( ! $no_session ) {
					$_SESSION[ 'token' ] = $token;
					$_SESSION[ 'userid' ] = $user[ 'userid' ];
					$_SESSION[ 'username' ] = $user[ 'username' ];
					$_SESSION[ 'loggedin_user' ] = $user;
					$_SESSION[ 'new_session' ] = 1;
				}
			} else {
				$output[ 'BADLOGIN' ] = 1;
				if ( ! $no_session ) {
					$_SESSION[ 'token' ] = '';
					$_SESSION[ 'username' ] = $username;
				}
			}
		}
	}

	$my_token = hash(
		'sha512',
		session_id() .','.
		$_SERVER[ 'REMOTE_ADDR' ] .','.
		$config[ 'secure_phrase' ]
	);

	isset($check_token) || $check_token = $_SESSION['token'];
	if ( $my_token == $check_token ) {
		return 1;
	} else {
		return 0;
	}
}

function roles() {
	global $config;
	$role = $config['role'];
	return $role;
}

function encode_password( $new_password, $mode = array() ) {
	global $config;

	if ( empty($mode) ) {
		$mode = $config['password_modes'][ $config['password_modes']['prefered'] ];
	}
	if ( !empty($mode['cipher']) ) {
		$key_size = openssl_cipher_iv_length($mode['cipher']);
	}
	else {
		$key_size = 72;
	}
	$phrase_size = min( strlen($config['secure_phrase']), 8 );

	$rand_length = random_int( $key_size - $phrase_size, $key_size );
	$salt = openssl_random_pseudo_bytes($rand_length);

	$key = $salt . $config['secure_phrase'];
	$iv = '';
	$options = 0;

	if ( !empty($mode['hash']) ) {
		switch ( $mode['hash'] ) {
			case 'ssha512': $new_password = hash( 'sha512', $new_password . $key ); break;
			case 'md5': $new_password = md5( $new_password );
		}
	}

	if ( empty($mode['cipher']) ) {
		$user_password = $new_password;
	}
	else {
		if ( empty($mode['noiv']) ) {
			$iv = substr( $key, 0, openssl_cipher_iv_length($mode['cipher']) );
		}
		if ( !empty($mode['mcrypt']) ) {
			$key = substr($key,0,56); // mcrypt_enc_get_key_size('bf-ecb') = 56
			$iv = '';
			$options = OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING;
		}

		$user_password = openssl_encrypt( $new_password, $mode['cipher'], $key, $options, $iv );
		if ( !empty($mode['mcrypt']) ) {
			$user_password = base64_encode($user_password);
		}
	}

	return array( $user_password, base64_encode( $salt ), $config['password_modes']['prefered'] );
}

/*
  creates a variant of the XKCD style password if a dictionary is available
   as in 'correct horse battery staple'
  if no dictionary is available then is a random 15 character password
 */
function create_password(
	$mode = 'words', // or random
	$list = 'strong', // or sight or frequent or ... up to sight_frequent_strong
	$separator = '-',
	$char_set = 'numeric', // or ... up to symbol_numeric_alpha_ualpha
	$min_length = 15,
	$sections = 3,
	$section_min_length = 3,
) {
	global $config;
	$symbol_set = '!@#$%&*()-_+\'";:/?.,'; // reduced for mobile keyboards
	$numeric_set = '0123456789';
	$alpha_set = 'abcdefghijklmnopqrstuvwxyz';
	$ualpha_set = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	$char_set_str = '';
	if ( strpos($char_set,'symbol') !== false ) {
		$char_set_str .= $symbol_set;
	}
	if ( strpos($char_set,'numeric') !== false ) {
		$char_set_str .= $numeric_set;
	}
	if ( strpos($char_set,'alpha') !== false ) {
		$char_set_str .= $alpha_set;
	}
	if ( strpos($char_set,'ualpha') !== false ) {
		$char_set_str .= $ualpha_set;
	}
	$dict_file = $config['base_dir'] .'/lib/word_dictionary'; # /usr/share/dict/words
	$dictionary = array();
	$password = '';

	if ( $mode == 'words' ) {
		if ( strpos($list,'strong') !== false ) {
			$file = $config['base_dir'] .'/lib/word_dictionary';
			if ( is_readable( $file ) ) {
				$temp_dict = file( $file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES );
				if ( !empty($temp_dict) ) {
					$dictionary = array_merge($dictionary,$temp_dict);
				}
			}
		}
		if ( strpos($list,'sight') !== false ) {
			$file = $config['base_dir'] .'/lib/site_words';
			if ( is_readable( $file ) ) {
				$temp_dict = file( $file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES );
				if ( !empty($temp_dict) ) {
					$dictionary = array_merge($dictionary,$temp_dict);
				}
			}
		}
		if ( strpos($list,'frequent') !== false ) {
			$file = $config['base_dir'] .'/lib/frequent_words';
			if ( is_readable( $file ) ) {
				$temp_dict = file( $file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES );
				if ( !empty($temp_dict) ) {
					$dictionary = array_merge($dictionary,$temp_dict);
				}
			}
		}
		$dictionary = array_unique($dictionary);
	}

	$dict_size = count($dictionary) - 1;
	$char_set_size = strlen($char_set_str) - 1;
	if ( $dict_size < 1 ) {
		$mode = 'random';
	}
	$iterations = 0;
	while ( $iterations < $sections || strlen($password) < $min_length ) {
		$iterations++;
		if ( $mode == 'words' ) {
			if ( !empty($dictionary) ) {
				$word = $dictionary[ random_int(0,$dict_size) ];
				while ( strlen($word) < $section_min_length ) {
					$word = $dictionary[ random_int(0,$dict_size) ];
				}
				$password .= $word;
			}
		}
		else {
			if ( !empty($char_set_str) ) {
				$section_str = '';
				while ( strlen($section_str) < $section_min_length ) {
					$section_str .= $char_set_str[ random_int(0,$char_set_size) ];
				}
				$password .= $section_str;
			}
		}
		$password .= $separator;
	}
	$password = substr($password,0,-1);	 // chop last separator off

	return $password;
}

?>
