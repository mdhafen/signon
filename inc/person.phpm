<?php
function is_person( $o=array() ) {
	$person = 0;
	if ( ! empty( $o['objectClass'] ) ) {
		if ( in_array('inetOrgPerson',$o['objectClass']) ||
		     in_array('person',$o['objectClass']) ) {
			$person = 1;
		}
	}
	return $person;
}

function set_password( $ldap, $userdn, $password ) {
	$result = 0;
	$entropy = get_entropy( $password );
	if ( ! empty($userdn) && ! empty($password) ) {
		$set = $ldap->quick_search( array( 'objectClass' => '*' ), array(), 0, $userdn );
		if ( !empty($set) ) {
			$object = $set[0];
		}
		if ( empty($object) ) {
			return 0;
		}

		$salt = "";
		$len = mt_rand( 40-strlen($password), 50 );
		for ( $i = 0; $i < $len; $i++ ) {
			$salt .= chr( (int) mt_rand(1,255) );
		}
		$hash_pass = '{SSHA}' . base64_encode( sha1($password.$salt,TRUE) . $salt );
		$smb_pass = strtoupper(bin2hex(mhash(MHASH_MD4, iconv("UTF-8","UTF-16LE",$password))));

		$entry = array();
		if (
		  in_array( 'inetOrgPerson', $object['objectClass'] ) ||
		  in_array( 'person', $object['objectClass'] ) ||
		  in_array( 'simpleSecurityObject', $object['objectClass'] )
		  ) {
			$entry['userPassword'] = $hash_pass;
		}
		if ( in_array( 'sambaSamAccount', $object['objectClass'] ) ) {
			$entry['sambaNTPassword'] = $smb_pass;
            $entry['sambaPwdLastSet'] = time();
		}

		if ( ! empty( $entry ) ) {
			$result = $ldap->do_modify( $userdn, $entry );

			$user = ldap_explode_dn($userdn,1);
			$user = ldap_unescape($user[0]);
			$user = !empty($_SESSION['loggedin_user']['username']) ? $_SESSION['loggedin_user']['username'] : $user;
			append_log( "Password changed by $user with entropy value $entropy for $userdn", 'auth' );
		}
	}
	return $result;
}

function get_entropy( $password ) {
	$entropy = 0;
	$length = strlen($password);

	if ( preg_match("/[a-z]/",$password) ) {
		$entropy += 26;
		$password = preg_replace("/[a-z]/", "", $password );
	}
	if ( preg_match("/[A-Z]/",$password) ) {
		$entropy += 26;
		$password = preg_replace("/[A-Z]/", "", $password );
	}
	if ( preg_match("/[0-9]/",$password) ) {
		$entropy += 10;
		$password = preg_replace("/[0-9]/", "", $password );
	}
	if ( preg_match("/[,\.\?'\";:!@#\$%\^&\*\-_]]/",$password) ) {
		$entropy += 17;
		$password = preg_replace("/[,\.\?'\";:!@#\$%\^&\*\-_]]/", "", $password );
	}
	if ( preg_match("/[`~\(\)+=\{\}\|\[\]\\/<>]/",$password) ) {
		$entropy += 15;
		$password = preg_replace("/[`~\(\)+=\{\}\|\[\]\\/<>]/", "", $password );
	}

	if ( $entropy ) {
		$entropy = ( (int) log($entropy,2) ) * $length;
	}

	return $entropy;
}

function remove_from_groups( $ldap, $userdn ) {
	$result = 0;
	if ( !empty($userdn) ) {
		$set = $ldap->quick_search( array( 'objectClass' => '*' ), array(), 0, $userdn );
		if ( !empty($set) ) {
			$object = $set[0];
		}
		if ( empty($object) ) {
			return 0;
		}

		$groups = $ldap->quick_search( array( 'member' => "$userdn" ) );
		foreach ( $groups as $group ) {
			$group_dn = $group['dn'];
			$ldap->do_attr_del( $group_dn, array('member' => $userdn) );
			$result++;
		}

		$groups = $ldap->quick_search( array( 'memberUid' => $object['uid'][0] ) );
		foreach ( $groups as $group ) {
			$group_dn = $group['dn'];
			$ldap->do_attr_del( $group_dn, array('memberUid' => $object['uid'][0]) );
			$result++;
		}
	}
	return $result;
}

function is_pwned_password( $password ) {
    $dbh = db_connect('core');
    $sth = $dbh->prepare('SELECT * FROM pwned_passwords WHERE hash = :hash');
    $sth->bindValue( ':hash', sha1($password) );
    $sth->execute();
    if ( $row = $sth->fetch() ) {
        return $row['times_seen'];
    }

    return 0;
}

function log_attr_change( $userdn, $changes ) {
	$user = ldap_explode_dn($userdn,1);
	$user = ldap_unescape($user[0]);
	$user = !empty($_SESSION['loggedin_user']['username']) ? $_SESSION['loggedin_user']['username'] : $user;

	$dbh = db_connect('core');
	$sth = $dbh->prepare('REPLACE INTO attribute_changes (dn,user,attr,previous_value,timestamp) VALUES (:dn,:user,:attr,:prev,NOW())');
	$sth->bindValue( ':dn', $userdn );
	$sth->bindValue( ':user', $user );
	foreach ( $changes as $attr => $prev ) {
		$sth->bindValue( ':attr', $attr );
		$sth->bindValue( ':prev', $prev );
		$sth->execute();
	}
}

function get_attr_changes( $userdn ) {
	$changes = array();
	$dbh = db_connect('core');
	$sth = $dbh->prepare('SELECT * FROM attribute_changes WHERE dn = :dn');
	$sth->bindValue( ':dn', $userdn );
	$sth->execute();

	while ( $row = $sth->fetch() ) {
		$row = stripslashes_array( $row );
		$changes[ $row['attr'] ] = $row;
	}

	return $changes;
}
?>
