<?php

global $Twilio_From, $Twilio_Account, $Twilio_Token, $SMS_Message, $SMS_Renew_Message;
$Twilio_From = '';
$Twilio_Account = '';
$Twilio_Token = '';
$SMS_Message = "Your login for WCSDaccess follows, username: {{USERNAME}} password: {{PASSWORD}} reply STOP to opt-out, for help contact a WCSD Tech.";
$SMS_Renew_Message = "Your WCSD Guest Wifi account has expired, please renew your account at: https://signon.washk12.org/renew.php/{{TOKEN}}";

require_once 'Twilio/autoload.php';
use Twilio\Rest\Client;

global $config;
include_once( $config['base_dir'] .'/lib/data.phpm' );
include_once( $config['base_dir'] .'/lib/security.phpm' );
register_data_callback('ldap','rename','fix_dn_in_logs');

function fix_dn_in_logs( $old_dn, $new_dn ) {
	$dbh = db_connect('core');

	$new_uid = substr( $new_dn, 4, strpos($new_dn,',')-4 );
	$old_uid = substr( $old_dn, 4, strpos($old_dn,',')-4 );
	if ( $new_uid != $old_uid ) {
		$query = 'UPDATE user_default_password SET uid = :new WHERE uid = :old';
		$sth = $dbh->prepare($query);
		$sth->bindValue( ':old', $old_uid );
		$sth->bindValue( ':new', $new_uid );
		$sth->execute();

		$query = 'UPDATE user_locks SET uid = :new WHERE uid = :old';
		$sth = $dbh->prepare($query);
		$sth->bindValue( ':old', $old_uid );
		$sth->bindValue( ':new', $new_uid );
		$sth->execute();
	}

	if ( $new_dn != $old_dn ) {
		$query = 'UPDATE attribute_changes SET dn = :new WHERE dn = :old';
		$sth = $dbh->prepare($query);
		$sth->bindValue( ':old', $old_dn );
		$sth->bindValue( ':new', $new_dn );
		$sth->execute();
	}
}

function is_person( $o=array() ) {
    // based on is_person() usage as of 2023-11-27
    // this guarentees certain attributes:
    //  uid, userPassword, businessCategory
    //    (userPassword not visible to users per ldap acl)
    // there are also optional attributes:
    //  labeledURI, mail, employeeType
	$person = 0;
	if ( ! empty( $o['objectClass'] ) ) {
		if ( in_array('inetOrgPerson',$o['objectClass']) ||
		     in_array('posixAccount',$o['objectClass']) ) {
			$person = 1;
		}

		$required = array( 'uid', 'businessCategory' );
		$optional = array( 'labeledURI', 'mail', 'employeeType' );
		foreach ( $required as $attr ) {
			if ( empty($o[$attr]) ) {
				$person = 0;
				return $person;
			}
		}
	}

	return $person;
}

function get_default_password( $uid ) {
	global $config;
	$dbh = db_connect('core');
	$sth = $dbh->prepare('SELECT * FROM user_default_password WHERE uid = :uid');
	$sth->bindValue( ':uid', $uid );
	$sth->execute();
	$pass = '';
	$salt = '';
	$mode = '';

	while ( $row = $sth->fetch() ) {
		$row = stripslashes_array( $row );
		$pass = $row['default_password'];
		$salt = $row['salt'];
		$mode = $row['password_mode'];
	}
	if ( !empty($mode) ) {
		$mode = $config['password_modes'][ $mode ];
	}
	else {
		$mode = array();
	}

	if ( !empty($salt) ) {
		$key = base64_decode($salt) . $config['secure_phrase'];
	}
	else {
		$key = '';
	}

	if ( !empty($pass) ) {
		$pass = decode_password( $pass, $key, $mode );
	}
	else {
		$pass = '';
	}

	return $pass;
}

function set_default_password( $uid, $password ) {
	global $config;
	$mode = $config['password_modes'][ $config['password_modes']['prefered'] ];
	unset($mode['hash']);
	list($enc_password, $salt, $mode) = encode_password( $password, $mode );

	$dbh = db_connect('core');
	$sth = $dbh->prepare('REPLACE INTO user_default_password (uid,default_password,salt,password_mode,timestamp) VALUES (:uid,:passwd,:salt,:mode,NOW())');
	$sth->bindValue( ':uid', $uid );
	$sth->bindValue( ':passwd', $enc_password );
	$sth->bindValue( ':salt', $salt );
	$sth->bindValue( ':mode', $mode );
	$sth->execute();
}

function generate_default_password($entry) {
	$list = 'strong';
	$min_len = 16;
	if ( !empty($entry['employeeType']) && $entry['employeeType'][0] == 'Student'
			&& stripos($entry['dn'],',ou=elementary schools,') !== false ) {
		$list = 'sight';
		$min_len = 12;
	}
	$password = create_password( mode:'words', list:$list, min_length:$min_len );
	return $password;
}

function create_password_reset_token($uid) {
    $token = new_uuid();
	$ip = get_remote_ip();
	$user = $uid;
	$user = !empty($_SESSION['loggedin_user']['username']) ? $_SESSION['loggedin_user']['username'] : $user;

	$dbh = db_connect('core');
	$sth = $dbh->prepare('REPLACE INTO tokens (uid,token,user,ip,purpose) VALUES (:uid,:token,:user,:ip,"pass_reset")');
	$sth->bindValue( ':uid', $uid );
	$sth->bindValue( ':token', $token );
	$sth->bindValue( ':user', $user );
	$sth->bindValue( ':ip', $ip );
	$sth->execute();

	$sth = $dbh->prepare('INSERT INTO token_log (uid,user,ip,purpose) VALUES (:uid,:user,:ip,"pass_reset")');
	$sth->bindValue( ':uid', $uid );
	$sth->bindValue( ':user', $user );
	$sth->bindValue( ':ip', $ip );
	$sth->execute();

    return get_password_reset_token(userid:$uid);
}

function get_password_reset_token( $token = null, $userid = null ) {
	clean_password_reset_tokens();

	$dbh = db_connect('core');
	$query = 'SELECT * FROM tokens WHERE purpose = "pass_reset" AND ';
	if ( !empty($token) ) {
		$query .= 'token = :token';
		$sth = $dbh->prepare($query);
		$sth->bindValue( ':token', $token );
	}
	else if ( !empty($userid) ) {
		$query .= 'uid = :uid';
		$sth = $dbh->prepare($query);
		$sth->bindValue( ':uid', $userid );
	}
	$sth->execute();
	$result = array();

	while ( $row = $sth->fetch() ) {
		$result = stripslashes_array( $row );
        // token expires after 12 hours
        $result['expire_interval'] = '12 hours';
        // $result['expire_timestamp'] = strtotime('+12 hour', strtotime($row['timestamp']));
        $result['expire_timestamp'] = date_create($row['timestamp'])->add(new DateInterval('PT12H'))->getTimestamp();
	}
	return $result;
}

function clean_password_reset_tokens($token = null) {
	$dbh = db_connect('core');
    // token expires after 12 hours
	$dbh->exec('DELETE FROM tokens WHERE timestamp < DATE_SUB(NOW(), INTERVAL 12 HOUR)');

	if ( !empty($token) ) {
		$sth = $dbh->prepare('DELETE FROM tokens WHERE token = :token');
		$sth->bindValue( ':token', $token );
		$sth->execute();
	}
}

function set_password( $ldap, $userdn, $password ) {
	$result = 0;
	$entropy = get_entropy( $password );
	$ip = get_remote_ip();
	if ( ! empty($userdn) && ! empty($password) ) {
		$set = $ldap->quick_search( '(objectClass=*)', array(), 0, $userdn );
		if ( !empty($set) ) {
			$object = $set[0];
		}
		if ( empty($object) ) {
			return 0;
		}

		$salt = "";
		$len = mt_rand( 40-strlen($password), 50 );
		$salt = openssl_random_pseudo_bytes($len);
		$hash_pass = '{SSHA}' . base64_encode( sha1($password.$salt,TRUE) . $salt );
		$smb_pass = strtoupper(bin2hex(mhash(MHASH_MD4, iconv("UTF-8","UTF-16LE",$password))));

		$entry = array();
		if (
		  in_array( 'inetOrgPerson', $object['objectClass'] ) ||
		  in_array( 'person', $object['objectClass'] ) ||
		  in_array( 'simpleSecurityObject', $object['objectClass'] )
		  ) {
			$entry['userPassword'] = $hash_pass;
		}
		if ( in_array( 'sambaSamAccount', $object['objectClass'] ) ) {
			$entry['sambaNTPassword'] = $smb_pass;
			$entry['sambaPwdLastSet'] = time();
		}

		if ( ! empty( $entry ) ) {
			$result = $ldap->do_modify( $userdn, $entry );

			$user = ldap_explode_dn($userdn,1);
			$user = ldap_unescape($user[0]);
			$user = !empty($_SESSION['loggedin_user']['username']) ? $_SESSION['loggedin_user']['username'] : $user;
			append_log( "Password changed by $user at $ip with entropy value $entropy for $userdn", 'auth' );
		}
	}
	return $result;
}

function get_entropy( $password ) {
	$entropy = 0;
	$length = strlen($password);

	if ( preg_match("/[a-z]/",$password) ) {
		$entropy += 26;
		$password = preg_replace("/[a-z]/", "", $password );
	}
	if ( preg_match("/[A-Z]/",$password) ) {
		$entropy += 26;
		$password = preg_replace("/[A-Z]/", "", $password );
	}
	if ( preg_match("/[0-9]/",$password) ) {
		$entropy += 10;
		$password = preg_replace("/[0-9]/", "", $password );
	}
	if ( preg_match("/[,\.\?'\";:!@#\$%\^&\*\-_]]/",$password) ) {
		$entropy += 17;
		$password = preg_replace("/[,\.\?'\";:!@#\$%\^&\*\-_]]/", "", $password );
	}
	if ( preg_match("/[`~\(\)+=\{\}\|\[\]\\/<>]/",$password) ) {
		$entropy += 15;
		$password = preg_replace("/[`~\(\)+=\{\}\|\[\]\\/<>]/", "", $password );
	}

	if ( $entropy ) {
		$entropy = ( (int) log($entropy,2) ) * $length;
	}

	return $entropy;
}

function populate_static_user_attrs( &$object ) {
	$object['objectClass'] = array('top','inetOrgPerson','posixAccount','sambaSamAccount');
	$object['sambaAcctFlags'] = '[U ]';
	$object['gidNumber'] = '65534';
	$object['loginShell'] = '/bin/bash';
	if( isset($object['uid']) ) { $object['homeDirectory'] = '/Users/'. $object['uid']; }
}

function populate_dynamic_user_attrs( $ldap, &$object ) {
	if ( empty($object['sambaSID']) ) {
		$object['sambaSID'] = $ldap->get_next_num('sambaSID');
	}
	$object['sambaPwdLastSet'] = time();
	$new_uid = explode('-',$object['sambaSID']);
	$object['uidNumber'] = end($new_uid);
}

function get_groups( $ldap, $userdn ) {
	$result = [];
	if ( !empty($userdn) ) {
		$set = $ldap->quick_search( '(objectClass=*)', array(), 0, $userdn );
		if ( !empty($set) ) {
			$object = $set[0];
		}
		if ( empty($object) ) {
			return 0;
		}

		$groups = $ldap->quick_search( array( 'member' => "$userdn" ) );
		foreach ( $groups as $group ) {
			$result[] = $group;
		}

		if ( !empty($object['uid']) ) {
			$groups = $ldap->quick_search( array( 'memberUid' => $object['uid'][0] ) );
		}

		foreach ( $groups as $group ) {
			$result[] = $group;
		}
	}
	return $result;
}

function ldap_can_edit( $ldap, $objectdn ) {
	$groups;
    $userdn = $_SESSION['userid'];
	if ( !empty($userdn) ) {
		$groups = $ldap->quick_search( array('member'=>$userdn), array(), 2, 'ou=ACLGroups,'. $ldap->config['base'] );
	}

	foreach ( $groups as $group ) {
        if ( empty($group['ou']) ) {
            continue;
        }
		foreach ( $group['ou'] as $ou ) {
			if ( stripos($objectdn,$ou) !== false ) {
				return 1;
			}
		}
	}

    return 0;
}

function check_google_sync( $ldap, $object ) {
    $errors = array();
    $objects = array();
    $keys = array();
    $diff_keys = array();
    $keys_to_ignore = array('_source'=>1,'dn'=>1,'objectClass'=>1,'userPassword'=>1,'shadowLastChange'=>1,'sambaNTPassword'=>1,'sambaPwdLastSet'=>1,'sambaSID'=>1,'sambaAcctFlags'=>1,'loginShell'=>1,'homeDirectory'=>1,'uidNumber'=>1,'gidNumber'=>1);
    $set = array();
    $users = array();

    $uid = !empty($object['uid']) ? $object['uid'][0] : "";
    $num = !empty($object['employeeNumber']) ? $object['employeeNumber'][0] : "";

    if ( $uid && $num ) {
        $set = $ldap->quick_search( "(|(uid=$uid)(employeeNumber=$num))", array() );
    }
    else if ( $uid ) {
        $errors[] = 'NO_EMPLOYEENUMBER';
        $set = $ldap->quick_search( "(uid=$uid)", array() );
    }
    else if ( $num ) {
        $errors[] = 'NO_UID';
        $set = $ldap->quick_search( "(employeeNumber=$num)", array() );
    }
    else {
        $errors[] = 'CHECK_OBJECT_NO_UID_EMPLOYEENUMBER';
        return array($errors);
    }

    $emails = array();
    foreach ( $set as $obj ) {
        $keys = array_merge( $keys, array_keys($obj) );
        $obj['_source'] = 'LDAP';
        $objects[] = $obj;
        if ( !empty( $obj['mail'] ) ) {
            foreach ( $obj['mail'] as $email ) {
                array_push( $emails, $email );
            }
        }
    }
    $emails = array_unique($emails);
    foreach ( $emails as $mail ) {
        $user = get_user_google( $mail );
        if ( !empty($user) ) {
            $hash = google_user_hash_for_ldap( $user );
            populate_static_user_attrs($hash);
            $keys = array_merge( $keys, array_keys($hash) );
            $hash['_source'] = 'Google';
            $users[] = $hash;
            array_unshift( $objects, $hash );
        }
    }
    if ( empty($users) ) {
        $errors[] = 'CHECK_OBJECT_NO_GOOGLE';
        return array($errors);
    }
    if ( count($users) > 1 ) {
        $errors[] = 'CHECK_OBJECT_GOOGLE_DUPLICATES';
    }
    if ( count($set) > 1 ) {
        $errors[] = 'CHECK_OBJECT_LDAP_DUPLICATES';
    }
    unset($users);

    $keys = array_unique($keys);
    sort($keys);
    foreach ( $keys as $key ) {
        if ( !empty($keys_to_ignore[$key]) ) {
            continue;
        }
        unset($check);
        $is_diff = 0;
        foreach ( $objects as $obj ) {
            $val = '';
            switch ($obj['_source']) {
                case 'Google':
                    $val = !empty($obj[$key]) ? $obj[$key] : "";
                    break;
                case 'LDAP':
                    $val = implode( ' | ', (!empty($obj[$key]) ? $obj[$key] : array() ) );
                    break;
            }
            if ( ! isset($check) ) {
                $check = $val;
            }
            else {
                if ( $val != $check ) {
                    $is_diff = 1;
                }
            }
        }
        if ( $is_diff ) {
            $diff_keys[] = $key;
        }
    }
    return array($errors,$objects,$keys,$diff_keys);
}

function do_google_sync( $ldap, $object, $entry ) {
    $mods = array();
    $move = 0;
    $add = 0;
    $passwd_set = 0;

    populate_static_user_attrs($entry);

    if ( !empty($object) ) {
        $dn = $object['dn'];
        $rdn_attr = substr( $dn, 0, strpos($dn,'=') );
        $ignored_fields = array($rdn_attr,'dn','objectClass','userPassword','sambaNTPassword','shadowLastChange','sambaPwdLastSet');
        $dynamic_fields = array('sambaSID','uidNumber');
        $mod_add = array();
        $mod_del = array();
        $mod_rep = array();
        foreach ( $entry as $field => $value ) {
            if ( array_search($field,$ignored_fields) !== false ) { continue; }
            if ( array_search($field,$dynamic_fields) !== false ) { continue; }
            if ( empty($object[$field]) && !empty($value) ) {
                $mod_add[$field] = $value;
            }
            else if ( !empty($value) && $object[$field][0] != $value ) {
                $mod_rep[$field] = $value;
            }
        }
        $dynamic_generated = false;
        foreach ( $dynamic_fields as $field ) {
            if ( empty($object[$field]) ) {
                if ( empty($dynamic_generated) ) {
                    populate_dynamic_user_attrs($ldap,$entry);
                    $dynamic_generated = 1;
                }
                if ( !empty($entry[$field]) ) {
                    $mod_add[$field] = $entry[$field];
                }
            }
        }
        foreach ( $object as $field => $values ) {
            if ( array_search($field,$ignored_fields) !== false ) { continue; }
            if ( array_search($field,$dynamic_fields) !== false ) { continue; }
            if ( empty($entry[$field]) ) {
                $mod_del[$field] = array();
            }
        }

        if ( !empty($mod_add) || !empty($mod_del) || !empty($mod_rep) ) {
            $ldap->do_attr_del( $dn, $mod_del );
            $ldap->do_modify( $dn, $mod_add );
            $ldap->do_attr_replace( $dn, $mod_rep );
            $mods = array_keys(array_merge($mod_del,$mod_add,$mod_rep));
            sort($mods);
        }

        if ( strcasecmp( $dn, $entry['dn'] ) != 0 ) {
            $ldap->do_rename( $dn, "$rdn_attr=". ldap_escape($entry[$rdn_attr],'',LDAP_ESCAPE_DN), $ldap->dn_get_parent($entry['dn']) );
            $move = 1;
        }
    }
    else {
        $dn = $entry['dn'];
        unset( $entry['dn'] );

        populate_dynamic_user_attrs($ldap,$entry);

        $result = $ldap->do_add( $dn, $entry );
        $add = 1;

        if ( $entry['employeeType'] == 'Student' ) {
            $passwd = get_default_password( $entry['uid'] );
            if ( empty($passwd) ) {
                $passwd = generate_default_password($entry);
                if ( !empty($passwd) ) {
                    set_default_password( $entry['uid'], $passwd );
                }
            }
            if ( !empty($passwd) ) {
                set_password( $ldap, $dn, $passwd );
                $passwd_set = 1;
            }
        }
    }
    return array( $mods, $move, $add, $passwd_set );
}

function remove_from_groups( $ldap, $userdn ) {
	$result = 0;
	if ( !empty($userdn) ) {
		$set = $ldap->quick_search( '(objectClass=*)', array(), 0, $userdn );
		if ( !empty($set) ) {
			$object = $set[0];
		}
		if ( empty($object) ) {
			return 0;
		}

		$groups = get_groups($ldap, $userdn);
		foreach ( $groups as $group ) {
			$group_dn = $group['dn'];
			if ( !empty( $group['member'] ) ) {
				$ldap->do_attr_del( $group_dn, array('member' => $userdn) );
			}
			else if ( !empty( $group['memberUid'] ) ) {
				$ldap->do_attr_del( $group_dn, array('memberUid' => $object['uid'][0]) );
			}
			$result++;
		}
	}
	return $result;
}

function get_guest_signature( $uid, $token = null ) {
    $dbh = db_connect('core');
    $data;
    $query = 'SELECT *,NOW() AS `now`,DATE_SUB(`aup_expire`, INTERVAL 3 MONTH) AS `send_notice` FROM guest_signatures WHERE ';
    if ( !empty($uid) ) {
        $data = $uid;
        $query .= 'guest_uid = :guest';
    }
    else if ( !empty($token) ) {
        $data = $token;
        $query .= 'guest_token = :guest';
    }
    else {
        return array();
    }
    $sth = $dbh->prepare($query);
    $sth->bindValue( ':guest', $data );
    $sth->execute();
    $row = $sth->fetch();

    return $row;
}

function sms_send_password( $phone, $password ) {
    global $SMS_Message, $Twilio_From, $Twilio_Account, $Twilio_Token;

    if ( empty($phone) || empty($password) ) {
        return 0;
    }

    $message = $SMS_Message;
    $message = str_replace( '{{USERNAME}}', $phone, $message );
    $message = str_replace( '{{PASSWORD}}', $password, $message );

    $phone = preg_replace( '/\D/', "", $phone );
    if ( strlen( $phone ) < 10 ) {
        return 0;
    }
    if ( $phone[0] != '1' && $phone[0] != '+' ) {
        $phone = '1' . $phone;
    }
    if ( $phone[0] != '+' ) {
        $phone = '+' . $phone;
    }

    //$message = wordwrap( $message, 70, "\r\n" );
    $client = new Client( $Twilio_Account, $Twilio_Token );
    try {
        $client->messages->create(
            $phone,
            array(
                'from' => $Twilio_From,
                'body' => $message,
            )
        );
    } catch ( \Exception $e ) {
        $message = $e->getMessage();
        if ( stripos($message,'blacklist') !== false ) {
            return 'blacklist';
        }
    }

    return 1;
}

function sms_send_renew_notice( $guest_uid ) {
    global $SMS_Renew_Message, $Twilio_From, $Twilio_Account, $Twilio_Token;
    $phone = $guest_uid;
    
    if ( empty($phone) ) {
        return 'empty';
    }

    $token = bin2hex( random_bytes(16) );

    $phone = preg_replace( '/\D/', "", $phone );
    if ( strlen( $phone ) < 10 ) {
        return 0;
    }

    $token = $phone . $token;  // ~ 74 characters
    $message = $SMS_Renew_Message;
    $message = str_replace( '{{TOKEN}}', $token, $message );

    if ( $phone[0] != '+' ) {
        if ( $phone[0] != '1' ) {
            $phone = '1' . $phone;
        }
        $phone = '+' . $phone;
    }

    //$message = wordwrap( $message, 70, "\r\n" );
    $client = new Client( $Twilio_Account, $Twilio_Token );
    try {
        $client->messages->create(
            $phone,
            array(
                'from' => $Twilio_From,
                'body' => $message,
            )
        );
    } catch ( \Exception $e ) {
        $message = $e->getMessage();
        if ( stripos($message,'blacklist') !== false ) {
            return 'blacklist';
        }
    }

    record_renew_sms( $guest_uid, $token );
    return 1;
}

function record_renew_sms( $uid, $token ) {
    $dbh = db_connect('core');
    $sth = $dbh->prepare('SELECT * FROM guest_signatures WHERE guest_uid = :guest');
    $sth->bindValue( ':guest', $uid );
    $sth->execute();

    $query;
    if ( $row = $sth->fetch() ) {
        $query = 'UPDATE guest_signatures SET aup_sent = NOW(), guest_token = :token WHERE guest_uid = :guest';
    }
    else {
        $query = 'INSERT INTO guest_signatures (guest_token,guest_uid,aup_sent,aup_expire) VALUES (:token, :guest, NOW(), DATE_ADD(NOW(), INTERVAL 3 MONTH))';
    }
    $sth = $dbh->prepare($query);
    $sth->bindValue( ':token', $token );
    $sth->bindValue( ':guest', $uid );
    $sth->execute();
    if ( $sth->errorCode() !== '00000' ) {
        error_log( "Record Renewal Sent SQL Error: ". $sth->errorInfo()[2] );
    }
}

function record_guest_signature( $uid ) {
    $dbh = db_connect('core');
    $sth = $dbh->prepare('SELECT * FROM guest_signatures WHERE guest_uid = :guest');
    $sth->bindValue( ':guest', $uid );
    $sth->execute();

    $query;
    if ( $row = $sth->fetch() ) {
        $query = 'UPDATE guest_signatures SET guest_token = NULL, aup_signed = NOW(), aup_expire = DATE_ADD(NOW(), INTERVAL 1 YEAR) WHERE guest_uid = :guest';
    }
    else {
        $query = 'INSERT INTO guest_signatures (guest_uid,aup_signed,aup_expire) VALUES (:guest, NOW(), DATE_ADD(NOW(), INTERVAL 1 YEAR))';
    }
    $sth = $dbh->prepare($query);
    $sth->bindValue( ':guest', $uid );
    $sth->execute();
    if ( $sth->errorCode() !== '00000' ) {
        error_log( "Record Signature SQL Error: ". $sth->errorInfo()[2] );
        return 0;
    }
    else {
        return 1;
    }
}

function is_pwned_password( $password ) {
    $dbh = db_connect('core');
    $sth = $dbh->prepare('SELECT * FROM pwned_passwords WHERE hash = :hash');
    $sth->bindValue( ':hash', sha1($password) );
    $sth->execute();
    if ( $row = $sth->fetch() ) {
        return $row['times_seen'];
    }

    return 0;
}

function get_lock_status( $username ) {
	global $config;
	$locked = array();
	$dbh = db_connect('core');
	$sth = $dbh->prepare('SELECT * FROM user_locks WHERE uid = :uid');
	$sth->bindValue( ':uid', $username );
	$sth->execute();

	while ( $row = $sth->fetch() ) {
		$row = stripslashes_array( $row );
		$locked = $row;
	}
	if ( !empty($locked['password_mode']) ) {
		$mode = $config['password_modes'][ $locked['password_mode'] ];
	}
	else {
		$mode = array();
	}

	if ( !empty($locked['salt']) ) {
		$key = base64_decode($locked['salt']) . $config['secure_phrase'];
	}
	else {
		$key = '';
	}

	if ( !empty($locked['passwd']) ) {
		$locked['passwd'] = decode_password( $locked['passwd'], $key, $mode );
	}

	return $locked;
}

function lock_user( $ldap, $userdn, $password ) {
	global $config;
	$set = $ldap->quick_search( '(objectClass=*)', array(), 0, $userdn );
	$object = $set[0];
	$objectdn = $object['dn'];
	unset( $object['dn'] );
	$username = $object['uid'][0];

	$mode = $config['password_modes'][ $config['password_modes']['prefered'] ];
	unset($mode['hash']);
	list($enc_password, $salt, $mode) = encode_password( $password, $mode );

	$user = !empty($_SESSION['loggedin_user']['username']) ? $_SESSION['loggedin_user']['username'] : $username;

	$dbh = db_connect('core');
	$sth = $dbh->prepare('REPLACE INTO user_locks (uid,passwd,salt,password_mode,user) VALUES (:uid,:passwd,:salt,:mode,:user)');
	$sth->bindValue( ':uid', $username );
	$sth->bindValue( ':passwd', $enc_password );
	$sth->bindValue( ':salt', $salt );
	$sth->bindValue( ':mode', $mode );
	$sth->bindValue( ':user', $user );
	$result = $sth->execute();

	append_log( "$username Locked by $user", 'auth' );
	return $result;
}

function unlock_user( $ldap, $userdn ) {
	$dbh = db_connect('core');

	$set = $ldap->quick_search( '(objectClass=*)', array(), 0, $userdn );
	$object = $set[0];
	$objectdn = $object['dn'];
	unset( $object['dn'] );
	$username = $object['uid'][0];

	$user = !empty($_SESSION['loggedin_user']['username']) ? $_SESSION['loggedin_user']['username'] : $username;

	$sth = $dbh->prepare('DELETE FROM user_locks WHERE uid = :uid');
	$sth->bindValue( ':uid', $username );
	$result = $sth->execute();

	append_log( "$username Unlocked by $user", 'auth' );
	return $result;
}

function log_attr_change( $userdn, $changes ) {
	$ip = get_remote_ip();
	$user = ldap_explode_dn($userdn,1);
	$user = ldap_unescape($user[0]);
	$user = !empty($_SESSION['loggedin_user']['username']) ? $_SESSION['loggedin_user']['username'] : $user;

	$dbh = db_connect('core');
	$sth = $dbh->prepare('REPLACE INTO attribute_changes (dn,user,user_ip,attr,previous_value,timestamp) VALUES (:dn,:user,:ip,:attr,:prev,NOW())');
	$sth->bindValue( ':dn', $userdn );
	$sth->bindValue( ':user', $user );
	$sth->bindValue( ':ip', $ip );
	foreach ( $changes as $attr => $prev ) {
		$sth->bindValue( ':attr', $attr );
		$sth->bindValue( ':prev', $prev );
		$sth->execute();
	}
}

function get_attr_changes( $userdn ) {
	$changes = array();
	$dbh = db_connect('core');
	$sth = $dbh->prepare('SELECT * FROM attribute_changes WHERE dn = :dn');
	$sth->bindValue( ':dn', $userdn );
	$sth->execute();

	while ( $row = $sth->fetch() ) {
		$row = stripslashes_array( $row );
		$changes[ $row['attr'] ] = $row;
	}

	return $changes;
}
?>
